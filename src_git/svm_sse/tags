!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
LINEAR	svm.h	/^        enum SVMTYPE { LINEAR, RBF, POLY };$/;"	e	enum:SVMachine::SVMTYPE
POLY	svm.h	/^        enum SVMTYPE { LINEAR, RBF, POLY };$/;"	e	enum:SVMachine::SVMTYPE
RBF	svm.h	/^        enum SVMTYPE { LINEAR, RBF, POLY };$/;"	e	enum:SVMachine::SVMTYPE
SVMTYPE	svm.h	/^        enum SVMTYPE { LINEAR, RBF, POLY };$/;"	g	class:SVMachine
SVMachine	svm.cpp	/^SVMachine::SVMachine(const wchar_t* fname): m_status(-1),$/;"	f	class:SVMachine
SVMachine	svm.h	/^class SVMachine$/;"	c
SVMachine_H	svm.h	3;"	d
TYPESIZE	svm.h	9;"	d
VEC2D_H	vec2d.h	3;"	d
add	vec2d.cpp	/^void vec2D::add(const vec2D& a, const vec2D& b)      \/\/this = a.+b$/;"	f	class:vec2D
add	vec2d.cpp	/^void vec2D::add(float scalar)           \/\/this = this.+scalar   sse optimized$/;"	f	class:vec2D
classify	svm.cpp	/^int SVMachine::classify(const float* x, double& y) const$/;"	f	class:SVMachine
classify	svm.cpp	/^int SVMachine::classify(const vec2D& x, double& y) const$/;"	f	class:SVMachine
close	vec2d.cpp	/^void vec2D::close(void)$/;"	f	class:vec2D
conv2D	vec2d.cpp	/^void vec2D::conv2D(const vec2D& a, const vec2D& filter)        \/\/this = conv2D(A, filter)  (this = A in sizes)$/;"	f	class:vec2D
conv2D	vec2d.cpp	/^void vec2D::conv2D(const vec2D& a, const vec2D& re, const vec2D& im)        \/\/this = conv2D(A, Im,Re)  (this = A in sizes)$/;"	f	class:vec2D
copy	vec2d.cpp	/^bool vec2D::copy(const vec2D& v, int left, int top)                                        \/\/copy [hxw] region from top,left offset A to this$/;"	f	class:vec2D
data	vec2d.h	/^inline const float* vec2D::data(int y, int x) const$/;"	f	class:vec2D
dimension	svm.h	/^inline unsigned int SVMachine::dimension() const$/;"	f	class:SVMachine
div	vec2d.cpp	/^void vec2D::div(const vec2D& a, const vec2D& b)      \/\/this = a.\/b$/;"	f	class:vec2D
div	vec2d.cpp	/^void vec2D::div(float scalar)           \/\/this = this.\/scalar   sse optimized$/;"	f	class:vec2D
fliplr	vec2d.cpp	/^void vec2D::fliplr()$/;"	f	class:vec2D
get	vec2d.h	/^inline float vec2D::get(int y, int x) const$/;"	f	class:vec2D
height	vec2d.h	/^inline unsigned int vec2D::height() const$/;"	f	class:vec2D
histeq	vec2d.cpp	/^void vec2D::histeq(vec2D &hist)    \/\/hist 1x256 array$/;"	f	class:vec2D
init	vec2d.cpp	/^void vec2D::init(const vec2D& v)$/;"	f	class:vec2D
init	vec2d.cpp	/^void vec2D::init(unsigned int ysize, unsigned int xsize, int yoffset, int xoffset)$/;"	f	class:vec2D
inter2	vec2d.cpp	/^void vec2D::inter2(const vec2D& src, vec2D& dst_grdx, vec2D& dst_grdy)                \/\/2d interpolation$/;"	f	class:vec2D
length	vec2d.h	/^inline unsigned int vec2D::length() const$/;"	f	class:vec2D
m_bias	svm.h	/^        double m_bias;                \/\/bias$/;"	m	class:SVMachine
m_data	vec2d.h	/^        float** m_data;               \/\/offseted data$/;"	m	class:vec2D
m_dimension	svm.h	/^        unsigned int m_dimension;       \/\/sv dimensionality$/;"	m	class:SVMachine
m_height	vec2d.h	/^        unsigned int m_height;$/;"	m	class:vec2D
m_rbfSub	svm.h	/^        vec2D* m_rbfSub;          \/\/rbf sub operation$/;"	m	class:SVMachine
m_scalar	svm.h	/^        vec2D* m_scalar;          \/\/temp scalar vector 1x1$/;"	m	class:SVMachine
m_status	svm.h	/^        int m_status;                   \/\/0-OK, -1,-2,-3 ... file err$/;"	m	class:SVMachine
m_svmParam	svm.h	/^        double m_svmParam;              \/\/ploynomial - d,  (x*sv + 1) .^ d$/;"	m	class:SVMachine
m_svmType	svm.h	/^        enum SVMTYPE m_svmType;         \/\/lin,rbf,poly$/;"	m	class:SVMachine	typeref:enum:SVMachine::SVMTYPE
m_svs	svm.h	/^        vector<vec2D*> m_svs;         \/\/support vectors, row vectors$/;"	m	class:SVMachine
m_svsNum	svm.h	/^        unsigned int m_svsNum;          \/\/sv's number$/;"	m	class:SVMachine
m_weights	svm.h	/^        vector<double> m_weights;     \/\/col vector w = alpha * y$/;"	m	class:SVMachine
m_width	vec2d.h	/^        unsigned int m_width;$/;"	m	class:vec2D
m_xInput	svm.h	/^        vec2D* m_xInput;          \/\/temp x input vector 1xdim$/;"	m	class:SVMachine
m_xlast	vec2d.h	/^        int m_xlast, m_ylast;$/;"	m	class:vec2D
m_xoffset	vec2d.h	/^        int m_xoffset, m_yoffset;$/;"	m	class:vec2D
m_ylast	vec2d.h	/^        int m_xlast, m_ylast;$/;"	m	class:vec2D
m_yoffset	vec2d.h	/^        int m_xoffset, m_yoffset;$/;"	m	class:vec2D
maxval	vec2d.cpp	/^float vec2D::maxval() const$/;"	f	class:vec2D
maxval	vec2d.cpp	/^void vec2D::maxval(float& max, int& x, int& y, int sizex, int sizey, int dx, int dy) const$/;"	f	class:vec2D
mconv	vec2d.h	/^inline float vec2D::mconv(const float* a, const float* b, unsigned int size) const$/;"	f	class:vec2D
minmax	vec2d.cpp	/^void vec2D::minmax(float& min, float& max) const$/;"	f	class:vec2D
minval	vec2d.cpp	/^float vec2D::minval() const$/;"	f	class:vec2D
mul	vec2d.cpp	/^void vec2D::mul(const vec2D& a, const vec2D& b)      \/\/this = a*b$/;"	f	class:vec2D
mul	vec2d.cpp	/^void vec2D::mul(float scalar)           \/\/this = this.*scalar   sse optimized$/;"	f	class:vec2D
mule	vec2d.cpp	/^void vec2D::mule(const vec2D& a, const vec2D& b)      \/\/this = a.*b$/;"	f	class:vec2D
mult	vec2d.cpp	/^void vec2D::mult(const vec2D& a, const vec2D& b)      \/\/this = a*b'$/;"	f	class:vec2D
normalize	vec2d.cpp	/^void vec2D::normalize(float a, float b)$/;"	f	class:vec2D
operator ()	vec2d.h	/^inline float vec2D::operator()(int y, int x) const$/;"	f	class:vec2D
operator ()	vec2d.h	/^inline float& vec2D::operator()(int y, int x)$/;"	f	class:vec2D
operator *	vec2d.h	/^inline const vec2D& vec2D::operator*(const vec2D& b) const     \/\/ c = a*b -> C = this*B$/;"	f	class:vec2D
operator =	vec2d.h	/^inline const vec2D& vec2D::operator=(const float * pf)$/;"	f	class:vec2D
operator =	vec2d.h	/^inline const vec2D& vec2D::operator=(const vec2D & v)$/;"	f	class:vec2D
operator []	vec2d.h	/^inline float vec2D::operator[](unsigned int i) const$/;"	f	class:vec2D
operator []	vec2d.h	/^inline float& vec2D::operator[](unsigned int i)$/;"	f	class:vec2D
print	vec2d.cpp	/^void vec2D::print(const wchar_t* file) const$/;"	f	class:vec2D
prod	vec2d.cpp	/^float vec2D::prod() const$/;"	f	class:vec2D
repmat	vec2d.cpp	/^vec2D* vec2D::repmat(unsigned int v, unsigned int h)$/;"	f	class:vec2D
set	vec2d.cpp	/^void vec2D::set(float scalar)$/;"	f	class:vec2D
set	vec2d.cpp	/^void vec2D::set(float scalar, RECT& r)                              \/\/0-offset array function$/;"	f	class:vec2D
setrand	vec2d.cpp	/^void vec2D::setrand()$/;"	f	class:vec2D
sign	svm.h	/^inline int SVMachine::sign(double x) const$/;"	f	class:SVMachine
status	svm.h	/^inline int SVMachine::status() const$/;"	f	class:SVMachine
sub	vec2d.cpp	/^void vec2D::sub(const vec2D& a, const vec2D& b)      \/\/this = a.-b$/;"	f	class:vec2D
sub	vec2d.cpp	/^void vec2D::sub(float scalar)           \/\/this = this.-scalar   sse optimized$/;"	f	class:vec2D
vec2D	vec2d.cpp	/^vec2D::vec2D(const vec2D& v)$/;"	f	class:vec2D
vec2D	vec2d.cpp	/^vec2D::vec2D(const wchar_t* file) : m_width(0), m_height(0), m_xlast(0), m_ylast(0),$/;"	f	class:vec2D
vec2D	vec2d.cpp	/^vec2D::vec2D(unsigned int ysize, unsigned int xsize,$/;"	f	class:vec2D
vec2D	vec2d.h	/^class vec2D       \/\/16 byte aligned$/;"	c
width	vec2d.h	/^inline unsigned int vec2D::width() const$/;"	f	class:vec2D
xfirst	vec2d.h	/^inline int vec2D::xfirst() const$/;"	f	class:vec2D
xlast	vec2d.h	/^inline int vec2D::xlast() const$/;"	f	class:vec2D
yfirst	vec2d.h	/^inline int vec2D::yfirst() const$/;"	f	class:vec2D
ylast	vec2d.h	/^inline int vec2D::ylast() const$/;"	f	class:vec2D
~SVMachine	svm.cpp	/^SVMachine::~SVMachine()$/;"	f	class:SVMachine
~vec2D	vec2d.cpp	/^vec2D::~vec2D()$/;"	f	class:vec2D

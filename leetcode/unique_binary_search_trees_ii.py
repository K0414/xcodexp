from nose.tools import assert_equal
import copy

# Definition for a  binary tree node
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    # @return a list of tree node
    def generateTrees(self, n):
        #return self._solve_dfs(0, n)
        return self._solve_gen(n)

    def _solve_dfs(self, l, r):
        """
        Notice: The trees generated by this method share branches
        with each other.
        """
        if l >= r:
            return [ None ]
        result = []
        for i in range(l, r):
            lnodes = self._solve_dfs(l, i)
            rnodes = self._solve_dfs(i+1, r)
            for x in lnodes:
                for y in rnodes:
                    root = TreeNode(i+1)
                    root.left = x
                    root.right = y
                    result.append(root)
        return result

    def _solve_gen(self, n):
        def _build(nodes):
            n = len(nodes)
            if n == 0:
                yield None
                return
            for i in range(n):
                root = nodes[i]
                for left in _build(nodes[:i]):
                    for right in _build(nodes[i+1:]):
                        root.left, root.right = left, right
                        yield root
        nodes = map(TreeNode, range(1, n+1))
        return map(copy.deepcopy, _build(nodes))


class TestSolution(object):

    def test_simple(self):
        s = Solution()
        trees = s.generateTrees(0)
        assert_equal(trees, [None])
        trees = s.generateTrees(1)
        assert_equal(len(trees), 1)
        assert_equal(trees[0].val, 1)
        assert_equal(trees[0].left, None)
        assert_equal(trees[0].right, None)

    def test_example(self):
        import helper
        s = Solution()
        trees = s.generateTrees(3)
        r = []
        for tree in trees:
            r.append(helper.Tree.serialize(tree))
        r.sort()
        answer = [[1,'#',3,2],
                  [3,2,'#',1],
                  [3,1,'#','#',2],
                  [2,1,3],
                  [1,'#',2,'#',3]]
        answer.sort()
        assert_equal(r, answer)

